
package co.edu.unicolombo.s3.poo.inventory.library.Guis.Reservation;

// import co.edu.unicolombo.s3.poo.inventory.library.Domain.Models.Book;
// import co.edu.unicolombo.s3.poo.inventory.library.Domain.Models.Reservation;
import co.edu.unicolombo.s3.poo.inventory.library.Guis.Loans.CreateLoan;
import co.edu.unicolombo.s3.poo.inventory.library.Infraestructure.Persistences.Entities.BookEntity;
import co.edu.unicolombo.s3.poo.inventory.library.Infraestructure.Persistences.Entities.ReservationEntity;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Commands.Book.RemoveQuantityFromStock;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Commands.Book.SetBookToFalseAviailable;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Commands.Client.CreateClientCommmands;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Commands.Loan.CreateLoanCommandsController;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Commands.Reservation.DeleteReservationCommands;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Queries.Book.GetBookIsAvailableQueries;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Queries.Client.GetClientByNameQueries;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Queries.Reservation.GetListReservationsQueries;
import co.edu.unicolombo.s3.poo.inventory.library.Service.Handlers.Queries.Reservation.GetReservationByNameClient;

import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan
 */
public class GeneralReservation extends javax.swing.JDialog {

    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    private Map<Integer, ReservationEntity> reservationMap = new HashMap<>();
    private GetReservationByNameClient getReservation;
    private GetListReservationsQueries getListReservationsQueries;
    private CreateLoanCommandsController createLoanCommandsController;
    private CreateClientCommmands createClientCommmands;
    private GetClientByNameQueries getClientByNameQueries;
    private RemoveQuantityFromStock removeQuantityFromStock;
    private SetBookToFalseAviailable setBookToFalseAviailable;
    private GetBookIsAvailableQueries getBookIsAvailableQueries;
    private DeleteReservationCommands deleteReservationComands;

    /**
     * Creates new form GeneralReservation
     */
    public GeneralReservation(java.awt.Frame parent, boolean modal,
            GetReservationByNameClient getReservationByNameClient,
            CreateLoanCommandsController createLoanCommandsController,
            CreateClientCommmands createClientCommmands,
            GetClientByNameQueries getClientByNameQueries,
            RemoveQuantityFromStock removeQuantityFromStock,
            SetBookToFalseAviailable setBookToFalseAviailable,
            GetBookIsAvailableQueries getBookIsAvailableQueries,
            GetListReservationsQueries getListReservationsQueries,
            DeleteReservationCommands deleteReservation) {
        super(parent, modal);
        this.getReservation = getReservationByNameClient;
        this.createClientCommmands = createClientCommmands;
        this.createLoanCommandsController = createLoanCommandsController;
        this.getClientByNameQueries = getClientByNameQueries;
        this.removeQuantityFromStock = removeQuantityFromStock;
        this.setBookToFalseAviailable = setBookToFalseAviailable;
        this.getListReservationsQueries = getListReservationsQueries;
        this.getBookIsAvailableQueries = getBookIsAvailableQueries;
        this.deleteReservationComands = deleteReservation;
        initComponents();
        addToReservationTable();
    }

    // shows the reservation list 
    private void addToReservationTable() {
        try {
            var reservations = getListReservationsQueries.getAllReservations();
            filterTableWithData(reservations);
        } catch (Exception e) {
            // JOptionPane.showMessageDialog(this,e);
            System.out.println("is empty");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableReservation = new javax.swing.JTable();
        buttonDelete = new org.jdesktop.swingx.JXButton();
        buttonLoan = new org.jdesktop.swingx.JXButton();
        jLabel1 = new javax.swing.JLabel();
        lookForField = new org.jdesktop.swingx.JXSearchField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true), "Reservation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        tableReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Client", "Quantity", "Book", "Date"
            }
        ));
    
        jScrollPane2.setViewportView(tableReservation);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonDelete.setBackground(new java.awt.Color(0, 204, 204));
        buttonDelete.setText("Delete");
        buttonDelete.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonLoan.setBackground(new java.awt.Color(204, 204, 204));
        buttonLoan.setText("Loan");
        buttonLoan.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        buttonLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoanActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Reservation");

        lookForField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookForFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(324, 324, 324)
                        .addComponent(lookForField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lookForField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lookForFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_lookForFieldActionPerformed
        String showField = lookForField.getText().trim();

        try {

            if (showField.isEmpty()) {
                var allReservations = getListReservationsQueries.getAllReservations();
                filterTableWithData(allReservations);
                return;
            }

            if (showField.length() >= 5) {
                System.out.println("Searching for reservation with client name: " + showField);
                ReservationEntity reservation = getReservation.getReservationByClienName(showField);
                if (reservation != null) {
                    System.out.println("Reservation found, updating table.");
                    filterTableWithData(Collections.singletonList(reservation)); 
                } else {
                    System.out.println("No reservation found, clearing table.");
                    filterTableWithData(Collections.emptyList());
                }
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }// GEN-LAST:event_lookForFieldActionPerformed

    private void buttonLoanActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonLoanActionPerformed
        int selectRow = tableReservation.getSelectedRow();
        if (selectRow >= 0) {
            ReservationEntity selectReservation = reservationMap.get(selectRow);
            BookEntity book = selectReservation.getBookEntity();
            System.out.println("Book ID: " + book.getId());
            if (selectReservation.getBookEntity() == null) {
                JOptionPane.showMessageDialog(this,"The reservation does not have a valid book.");
            }
            
            try {
                boolean isAvailable = getBookIsAvailableQueries.bookIsAvailable(selectReservation.getBookEntity());
                if (!isAvailable) {
                    JOptionPane.showMessageDialog(this, "The book is not Available");
                } else {
                    openCreateLoanWindow(selectReservation);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }// GEN-LAST:event_buttonLoanActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonDeleteActionPerformed
        int selectedRow = tableReservation.getSelectedRow();
        if (selectedRow >= 0) {
            ReservationEntity selecReservation = reservationMap.get(selectedRow);
            int option = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de que desea continuar?",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (option == JOptionPane.YES_OPTION) {
                deleteReservation(selecReservation);
                JOptionPane.showMessageDialog(this, "Reservation delete sucessfully");
                updateTable();
            }
        }
    }// GEN-LAST:event_buttonDeleteActionPerformed

    private void deleteReservation(ReservationEntity reservation) {
        try {
            deleteReservationComands.deleteReservation(reservation);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void updateTable() {
        reservationMap.clear();
        DefaultTableModel model = (DefaultTableModel) tableReservation.getModel();
        model.setRowCount(0);
        try {
            List<ReservationEntity> reservations = getListReservationsQueries.getAllReservations();

            if (reservations.isEmpty()) {
                JOptionPane.showMessageDialog(this, "The list is empty.");
            }

            for (int i = 0; i < reservations.size(); i++) {
                ReservationEntity reservation = reservations.get(i);
                String dateReservation = dateFormat.format(reservation.getDateReservation());
                reservationMap.put(i, reservation);
                model.addRow(new Object[] {
                        reservation.getClientEntity(),
                        reservation.getQuantity(),
                        reservation.getBookEntity(),
                        dateReservation
                });
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    e.getMessage());
        }

    }

    private void filterTableWithData(List<ReservationEntity> reservations) {
        var tableModel = new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] { "Client", "Quantity", "Book", "Date" });
        tableModel.setRowCount(0);
        reservationMap.clear();
        int rowIndex = 0;

        for (ReservationEntity reservation : reservations) {
            String dateReservation = dateFormat.format(reservation.getDateReservation());
            tableModel.addRow(new Object[] {
                    reservation.getClientEntity(),
                    reservation.getQuantity(),
                    reservation.getBookEntity(),
                    dateReservation
            });

            tableReservation.setModel(tableModel);
            tableReservation.repaint();
            reservationMap.put(rowIndex++, reservation);
        }
    }

    private void openCreateLoanWindow( ReservationEntity reservation) {
        var createLoanWindow = new CreateLoan(new javax.swing.JFrame(), true,
                reservation,
                createLoanCommandsController,
                createClientCommmands, getClientByNameQueries,
                removeQuantityFromStock,
                setBookToFalseAviailable);

                createLoanWindow.setOnLoanCreated(() -> {
                    int selectRow = tableReservation.getSelectedRow();
                    if (selectRow >= 0) {
                        ReservationEntity selecReservation = reservationMap.get(selectRow);
                        deleteReservation(selecReservation);
                        updateTable();
                    }
                });
        createLoanWindow.setLocationRelativeTo(this);
        createLoanWindow.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXButton buttonDelete;
    private org.jdesktop.swingx.JXButton buttonLoan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXSearchField lookForField;
    private javax.swing.JTable tableReservation;
    // End of variables declaration//GEN-END:variables
}
